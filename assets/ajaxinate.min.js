'use strict';

/* ===================================================================================== @preserve =
 ___  _   _    _
/   || | | |  | |
\__  | | | |  | |  __
/    |/  |/_) |/  /  \_/\/
\___/|__/| \_/|__/\__/  /\_/
              |\
              |/
AjaxinateMin
version v2.0.4
https://github.com/Elkfox/Ajaxinate
Copyright (c) 2017 Elkfox Co Pty Ltd
https://elkfox.com
MIT License
================================================================================================= */

let AjaxinateMin = function ajaxinateConstructor(config) {
	let settings = config || {};
	/*
		pagination: Selector of pagination container
		container: Selector of repeating content
		offset: 0, offset the number of pixels before the bottom to start loading more on scroll
		loadingText: 'Loading', The text changed during loading
		callback: null, function to callback after a new page is loaded
	*/
	let defaultSettings = {
		method: 'scroll',
		container: '#product-grid',
		pagination: '.infinite_next',
		offset: 0,
		loadingText: 'Loading',
		callback: null
	};
	// Merge configs
	this.settings = Object.assign(defaultSettings, settings);

	this.addScrollListeners = this.addScrollListeners.bind(this);
	this.addClickListener = this.addClickListener.bind(this);
	this.checkIfPaginationInView = this.checkIfPaginationInView.bind(this);
	this.stopMultipleClicks = this.stopMultipleClicks.bind(this);
	this.removeClickListener = this.removeClickListener.bind(this);
	this.removeScrollListener = this.removeScrollListener.bind(this);
	this.destroy = this.destroy.bind(this);

	this.containerElement = document.querySelector(this.settings.container);
	this.paginationElement = document.querySelector(this.settings.pagination);

	this.initialize();
};

AjaxinateMin.prototype.initialize = function initializeTheCorrectFunctionsBasedOnTheMethod() {
	if (this.containerElement) {
		let initializers = {
			click: this.addClickListener,
			scroll: this.addScrollListeners
		};
		initializers[this.settings.method]();
	}
};

AjaxinateMin.prototype.addScrollListeners = function addEventListenersForScrolling() {
	if (this.paginationElement) {
		document.addEventListener('scroll', this.checkIfPaginationInView);
		window.addEventListener('resize', this.checkIfPaginationInView);
		window.addEventListener('orientationchange', this.checkIfPaginationInView);
	}
};

AjaxinateMin.prototype.addClickListener = function addEventListenerForClicking() {
	if (this.paginationElement) {
		this.nextPageLinkElement = this.paginationElement.querySelector('a');
		this.clickActive = true;
		if (typeof this.nextPageLinkElement !== 'undefined' && this.nextPageLinkElement !== null) {
			this.nextPageLinkElement.addEventListener('click', this.stopMultipleClicks);
		}
	}
};

AjaxinateMin.prototype.stopMultipleClicks = function handleClickEvent(event) {
	event.preventDefault();
	if (this.clickActive) {
		this.nextPageLinkElement.innerText = this.settings.loadingText;
		this.nextPageUrl = this.nextPageLinkElement.href;
		this.clickActive = false;
		this.loadMore();
	}
};

AjaxinateMin.prototype.checkIfPaginationInView = function handleScrollEvent() {
	let top = this.paginationElement.getBoundingClientRect().top - this.settings.offset;
	let bottom = this.paginationElement.getBoundingClientRect().bottom + this.settings.offset;
	if (top <= window.innerHeight && bottom >= 0) {
		this.nextPageLinkElement = this.paginationElement.querySelector('a');
		this.removeScrollListener();
		if (this.nextPageLinkElement) {
			this.nextPageLinkElement.innerText = this.settings.loadingText;
			this.nextPageUrl = this.nextPageLinkElement.href;
			this.loadMore();
		}
	}
};

AjaxinateMin.prototype.loadMore = function getTheHtmlOfTheNextPageWithAnAjaxRequest() {
	this.request = new XMLHttpRequest();
	this.request.onreadystatechange = function success() {
		if (this.request.readyState === 4 && this.request.status === 200) {
			let newContainer = this.request.responseXML.querySelectorAll(this.settings.container)[0];
			let newPagination = this.request.responseXML.querySelectorAll(this.settings.pagination)[0];
			this.containerElement.insertAdjacentHTML('beforeend', newContainer.innerHTML);
			if (newPagination !== undefined) {
				newPagination.querySelector(".loading-overlay__spinner").classList.remove("hidden");
			} else {
				document.querySelector(".infinite_next .loading-overlay__spinner").classList.add("hidden");
			}
			this.paginationElement.innerHTML = newPagination.innerHTML;
			if (this.settings.callback && typeof this.settings.callback === 'function') {
				this.settings.callback(this.request.responseXML);
			}
			this.initialize();
		}
	}.bind(this);
	this.request.open('GET', this.nextPageUrl, true);
	this.request.responseType = 'document';
	this.request.send();
};

AjaxinateMin.prototype.removeClickListener = function removeClickEventListener() {
	this.nextPageLinkElement.removeEventListener('click', this.stopMultipleClicks);
};

AjaxinateMin.prototype.removeScrollListener = function removeScrollEventListener() {
	document.removeEventListener('scroll', this.checkIfPaginationInView);
	window.removeEventListener('resize', this.checkIfPaginationInView);
	window.removeEventListener('orientationchange', this.checkIfPaginationInView);
};

AjaxinateMin.prototype.destroy = function removeEventListenersAndRemoveThis() {
	let destroyers = {
		click: this.removeClickListener,
		scroll: this.removeScrollListener
	};
	destroyers[this.settings.method]();
	return this;
};